# Generated by Django 5.2.4 on 2025-07-24 12:30

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_name', models.CharField(help_text='Analysis session name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Session description', null=True)),
                ('date_from', models.DateField(blank=True, null=True)),
                ('date_to', models.DateField(blank=True, null=True)),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('document_types', models.JSONField(default=list, help_text='Filter by document types')),
                ('gl_accounts', models.JSONField(default=list, help_text='Filter by G/L accounts')),
                ('profit_centers', models.JSONField(default=list, help_text='Filter by profit centers')),
                ('users', models.JSONField(default=list, help_text='Filter by users')),
                ('total_transactions', models.IntegerField(default=0)),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20)),
                ('flagged_transactions', models.IntegerField(default=0)),
                ('high_value_transactions', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'analysis_sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DataFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_name', models.CharField(help_text='Original file name', max_length=255)),
                ('file_size', models.BigIntegerField(help_text='File size in bytes')),
                ('engagement_id', models.CharField(help_text='Engagement ID for the audit', max_length=100)),
                ('client_name', models.CharField(help_text='Client name', max_length=255)),
                ('company_name', models.CharField(help_text='Company name', max_length=255)),
                ('fiscal_year', models.IntegerField(help_text='Fiscal year for the audit')),
                ('audit_start_date', models.DateField(help_text='Audit start date')),
                ('audit_end_date', models.DateField(help_text='Audit end date')),
                ('total_records', models.IntegerField(default=0, help_text='Total records in file')),
                ('processed_records', models.IntegerField(default=0, help_text='Successfully processed records')),
                ('failed_records', models.IntegerField(default=0, help_text='Failed to process records')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('PARTIAL', 'Partially Processed')], default='PENDING', max_length=20)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('min_date', models.DateField(blank=True, null=True)),
                ('max_date', models.DateField(blank=True, null=True)),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
            ],
            options={
                'db_table': 'data_files',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='GLAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('account_id', models.CharField(db_index=True, help_text='GL Account ID', max_length=20, unique=True)),
                ('account_name', models.CharField(help_text='GL Account Name', max_length=255)),
                ('account_type', models.CharField(help_text='Account Type (Asset, Liability, Equity, Revenue, Expense)', max_length=50)),
                ('account_category', models.CharField(help_text='Account Category (e.g., Cash, Accounts Receivable, etc.)', max_length=100)),
                ('account_subcategory', models.CharField(blank=True, help_text='Account Subcategory', max_length=100, null=True)),
                ('normal_balance', models.CharField(choices=[('DEBIT', 'Debit'), ('CREDIT', 'Credit')], help_text='Normal balance side', max_length=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the account is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'gl_accounts',
                'ordering': ['account_id'],
            },
        ),
        migrations.CreateModel(
            name='MLModelTraining',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_name', models.CharField(help_text='Training session name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Training session description', null=True)),
                ('model_type', models.CharField(choices=[('isolation_forest', 'Isolation Forest'), ('random_forest', 'Random Forest'), ('dbscan', 'DBSCAN'), ('ensemble', 'Ensemble'), ('all', 'All Models')], help_text='Type of ML model trained', max_length=50)),
                ('training_data_size', models.IntegerField(help_text='Number of transactions used for training')),
                ('training_data_date_range', models.JSONField(default=dict, help_text='Date range of training data')),
                ('feature_count', models.IntegerField(help_text='Number of features used for training')),
                ('training_parameters', models.JSONField(default=dict, help_text='Model training parameters')),
                ('performance_metrics', models.JSONField(default=dict, help_text='Model performance metrics (AUC, accuracy, etc.)')),
                ('validation_metrics', models.JSONField(default=dict, help_text='Cross-validation metrics')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('TRAINING', 'Training'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('training_duration', models.FloatField(blank=True, help_text='Training duration in seconds', null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('model_file_path', models.CharField(blank=True, help_text='Path to saved model files', max_length=500, null=True)),
                ('model_version', models.CharField(default='1.0.0', help_text='Model version', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ml_model_training',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FileProcessingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_hash', models.CharField(db_index=True, help_text='SHA256 hash of file content for duplicate detection', max_length=64)),
                ('run_anomalies', models.BooleanField(default=False, help_text='Whether to run anomaly detection')),
                ('requested_anomalies', models.JSONField(default=list, help_text='List of requested anomaly types to run')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('QUEUED', 'Queued for Processing'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CELERY_ERROR', 'Celery Connection Error'), ('SKIPPED', 'Skipped - Duplicate Content')], default='PENDING', max_length=20)),
                ('analytics_results', models.JSONField(default=dict, help_text='Results from default analytics (TB, TE, GL summaries)')),
                ('anomaly_results', models.JSONField(default=dict, help_text='Results from requested anomaly tests')),
                ('ml_training_results', models.JSONField(default=dict, help_text='Results from ML model training')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('processing_duration', models.FloatField(blank=True, help_text='Processing duration in seconds', null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_file', models.ForeignKey(help_text='Reference to the uploaded data file', on_delete=django.db.models.deletion.CASCADE, related_name='processing_jobs', to='core.datafile')),
                ('existing_job', models.ForeignKey(blank=True, help_text='Reference to existing job if content is duplicate', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='duplicate_jobs', to='core.fileprocessingjob')),
            ],
            options={
                'db_table': 'file_processing_jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DuplicateAnalysisResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analysis_date', models.DateTimeField(auto_now_add=True, help_text='When the analysis was performed')),
                ('analysis_type', models.CharField(default='enhanced_duplicate', help_text='Type of analysis performed', max_length=50)),
                ('analysis_version', models.CharField(default='1.0.0', help_text='Version of analysis algorithm', max_length=20)),
                ('analysis_info', models.JSONField(default=dict, help_text='General analysis information (total transactions, duplicates, etc.)')),
                ('duplicate_list', models.JSONField(default=list, help_text='List of duplicate transactions found')),
                ('chart_data', models.JSONField(default=dict, help_text='Chart data for visualizations')),
                ('breakdowns', models.JSONField(default=dict, help_text='Various breakdowns (by type, user, account, etc.)')),
                ('slicer_filters', models.JSONField(default=dict, help_text='Slicer filters for dynamic filtering')),
                ('summary_table', models.JSONField(default=list, help_text='Summary table data')),
                ('export_data', models.JSONField(default=list, help_text='Export-ready data')),
                ('detailed_insights', models.JSONField(default=dict, help_text='Detailed insights and recommendations')),
                ('processing_duration', models.FloatField(blank=True, help_text='Processing duration in seconds', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='COMPLETED', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if analysis failed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_file', models.ForeignKey(help_text='Reference to the data file', on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_analyses', to='core.datafile')),
                ('processing_job', models.ForeignKey(blank=True, help_text='Reference to the processing job that generated this analysis', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='duplicate_results', to='core.fileprocessingjob')),
            ],
            options={
                'db_table': 'duplicate_analysis_results',
                'ordering': ['-analysis_date'],
            },
        ),
        migrations.CreateModel(
            name='BackdatedAnalysisResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analysis_date', models.DateTimeField(auto_now_add=True, help_text='When the analysis was performed')),
                ('analysis_type', models.CharField(default='enhanced_backdated', help_text='Type of analysis performed', max_length=50)),
                ('analysis_version', models.CharField(default='1.0.0', help_text='Version of analysis algorithm', max_length=20)),
                ('analysis_info', models.JSONField(default=dict, help_text='General analysis information (total backdated entries, amounts, etc.)')),
                ('backdated_entries', models.JSONField(default=list, help_text='List of backdated transactions found')),
                ('backdated_by_document', models.JSONField(default=list, help_text='Backdated entries grouped by document number')),
                ('backdated_by_account', models.JSONField(default=list, help_text='Backdated entries grouped by account')),
                ('backdated_by_user', models.JSONField(default=list, help_text='Backdated entries grouped by user')),
                ('audit_recommendations', models.JSONField(default=dict, help_text='Audit recommendations and priorities')),
                ('compliance_assessment', models.JSONField(default=dict, help_text='Compliance risk assessment')),
                ('financial_statement_impact', models.JSONField(default=dict, help_text='Financial statement impact analysis')),
                ('chart_data', models.JSONField(default=dict, help_text='Chart data for visualizations')),
                ('export_data', models.JSONField(default=list, help_text='Export-ready data')),
                ('processing_duration', models.FloatField(blank=True, help_text='Processing duration in seconds', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='COMPLETED', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if analysis failed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_file', models.ForeignKey(help_text='Reference to the data file', on_delete=django.db.models.deletion.CASCADE, related_name='backdated_analyses', to='core.datafile')),
                ('processing_job', models.ForeignKey(blank=True, help_text='Reference to the processing job that generated this analysis', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backdated_results', to='core.fileprocessingjob')),
            ],
            options={
                'db_table': 'backdated_analysis_results',
                'ordering': ['-analysis_date'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analysis_date', models.DateTimeField(auto_now_add=True, help_text='When the analysis was performed')),
                ('analysis_type', models.CharField(default='comprehensive_analytics', help_text='Type of analysis performed', max_length=50)),
                ('analysis_version', models.CharField(default='1.0.0', help_text='Version of analysis algorithm', max_length=20)),
                ('trial_balance', models.JSONField(default=dict, help_text='Trial balance analysis results')),
                ('general_ledger_summary', models.JSONField(default=dict, help_text='General ledger summary results')),
                ('account_analysis', models.JSONField(default=dict, help_text='Account-level analysis results')),
                ('transaction_summary', models.JSONField(default=dict, help_text='Transaction summary statistics')),
                ('chart_data', models.JSONField(default=dict, help_text='Chart data for visualizations')),
                ('breakdowns', models.JSONField(default=dict, help_text='Various breakdowns and summaries')),
                ('export_data', models.JSONField(default=list, help_text='Export-ready data')),
                ('processing_duration', models.FloatField(blank=True, help_text='Processing duration in seconds', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='COMPLETED', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if analysis failed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_file', models.ForeignKey(help_text='Reference to the data file', on_delete=django.db.models.deletion.CASCADE, related_name='analytics_results', to='core.datafile')),
                ('processing_job', models.ForeignKey(blank=True, help_text='Reference to the processing job that generated this analysis', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='analytics_result_objects', to='core.fileprocessingjob')),
            ],
            options={
                'db_table': 'analytics_results',
                'ordering': ['-analysis_date'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsProcessingResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analytics_type', models.CharField(choices=[('default_analytics', 'Default Analytics'), ('comprehensive_expense', 'Comprehensive Expense Analytics'), ('duplicate_analysis', 'Duplicate Analysis'), ('anomaly_detection', 'Anomaly Detection'), ('risk_assessment', 'Risk Assessment'), ('user_patterns', 'User Patterns'), ('account_patterns', 'Account Patterns'), ('temporal_patterns', 'Temporal Patterns'), ('all', 'All Analytics')], help_text='Type of analytics performed', max_length=50)),
                ('processing_status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('total_transactions', models.IntegerField(default=0, help_text='Total transactions analyzed')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total amount analyzed', max_digits=20)),
                ('unique_users', models.IntegerField(default=0, help_text='Number of unique users')),
                ('unique_accounts', models.IntegerField(default=0, help_text='Number of unique accounts')),
                ('flagged_transactions', models.IntegerField(default=0, help_text='Number of flagged transactions')),
                ('high_risk_transactions', models.IntegerField(default=0, help_text='Number of high-risk transactions')),
                ('anomalies_found', models.IntegerField(default=0, help_text='Number of anomalies found')),
                ('duplicates_found', models.IntegerField(default=0, help_text='Number of duplicates found')),
                ('trial_balance_data', models.JSONField(default=dict, help_text='Trial balance analysis results')),
                ('expense_breakdown', models.JSONField(default=dict, help_text='Expense breakdown analysis')),
                ('user_patterns', models.JSONField(default=dict, help_text='User pattern analysis')),
                ('account_patterns', models.JSONField(default=dict, help_text='Account pattern analysis')),
                ('temporal_patterns', models.JSONField(default=dict, help_text='Temporal pattern analysis')),
                ('risk_assessment', models.JSONField(default=dict, help_text='Risk assessment results')),
                ('chart_data', models.JSONField(default=dict, help_text='Chart data for visualizations')),
                ('export_data', models.JSONField(default=list, help_text='Export-ready data')),
                ('processing_duration', models.FloatField(blank=True, help_text='Processing duration in seconds', null=True)),
                ('analysis_version', models.CharField(default='1.0.0', help_text='Analysis algorithm version', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When processing was completed', null=True)),
                ('data_file', models.ForeignKey(help_text='Reference to the data file', on_delete=django.db.models.deletion.CASCADE, related_name='analytics_processing_results', to='core.datafile')),
                ('processing_job', models.ForeignKey(blank=True, help_text='Reference to the processing job', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='analytics_processing_results', to='core.fileprocessingjob')),
            ],
            options={
                'db_table': 'analytics_processing_results',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MLModelProcessingResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('model_type', models.CharField(choices=[('isolation_forest', 'Isolation Forest'), ('random_forest', 'Random Forest'), ('dbscan', 'DBSCAN'), ('ensemble', 'Ensemble'), ('duplicate_detection', 'Duplicate Detection'), ('anomaly_detection', 'Anomaly Detection'), ('all', 'All Models')], help_text='Type of ML model used', max_length=50)),
                ('processing_status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('anomalies_detected', models.IntegerField(default=0, help_text='Number of anomalies detected')),
                ('duplicates_found', models.IntegerField(default=0, help_text='Number of duplicates found')),
                ('risk_score', models.FloatField(default=0.0, help_text='Overall risk score')),
                ('confidence_score', models.FloatField(default=0.0, help_text='Model confidence score')),
                ('detailed_results', models.JSONField(default=dict, help_text='Detailed ML processing results')),
                ('model_metrics', models.JSONField(default=dict, help_text='Model performance metrics')),
                ('feature_importance', models.JSONField(default=dict, help_text='Feature importance scores')),
                ('processing_duration', models.FloatField(blank=True, help_text='Processing duration in seconds', null=True)),
                ('data_size', models.IntegerField(default=0, help_text='Number of records processed')),
                ('model_version', models.CharField(default='1.0.0', help_text='Model version used', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When processing was completed', null=True)),
                ('data_file', models.ForeignKey(help_text='Reference to the data file', on_delete=django.db.models.deletion.CASCADE, related_name='ml_processing_results', to='core.datafile')),
                ('processing_job', models.ForeignKey(blank=True, help_text='Reference to the processing job', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ml_processing_results', to='core.fileprocessingjob')),
            ],
            options={
                'db_table': 'ml_model_processing_results',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProcessingJobTracker',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_steps', models.IntegerField(default=0, help_text='Total number of processing steps')),
                ('completed_steps', models.IntegerField(default=0, help_text='Number of completed steps')),
                ('current_step', models.CharField(blank=True, help_text='Current processing step', max_length=100, null=True)),
                ('file_processing_status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('analytics_status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('ml_processing_status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('anomaly_detection_status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('overall_progress', models.FloatField(default=0.0, help_text='Overall progress percentage (0-100)')),
                ('file_processing_progress', models.FloatField(default=0.0, help_text='File processing progress percentage')),
                ('analytics_progress', models.FloatField(default=0.0, help_text='Analytics progress percentage')),
                ('ml_progress', models.FloatField(default=0.0, help_text='ML processing progress percentage')),
                ('anomaly_progress', models.FloatField(default=0.0, help_text='Anomaly detection progress percentage')),
                ('step_details', models.JSONField(default=list, help_text='Detailed step-by-step progress')),
                ('error_log', models.JSONField(default=list, help_text='Error log for failed steps')),
                ('total_processing_time', models.FloatField(blank=True, help_text='Total processing time in seconds', null=True)),
                ('memory_usage_mb', models.FloatField(blank=True, help_text='Peak memory usage in MB', null=True)),
                ('cpu_usage_percent', models.FloatField(blank=True, help_text='Peak CPU usage percentage', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, help_text='When processing started', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When processing completed', null=True)),
                ('data_file', models.ForeignKey(help_text='Reference to the data file', on_delete=django.db.models.deletion.CASCADE, related_name='job_trackers', to='core.datafile')),
                ('processing_job', models.OneToOneField(help_text='Reference to the processing job', on_delete=django.db.models.deletion.CASCADE, related_name='job_tracker', to='core.fileprocessingjob')),
            ],
            options={
                'db_table': 'processing_job_trackers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SAPGLPosting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_number', models.CharField(db_index=True, help_text='SAP Document Number', max_length=20)),
                ('posting_date', models.DateField(help_text='Posting Date')),
                ('gl_account', models.CharField(db_index=True, help_text='G/L Account Number', max_length=20)),
                ('amount_local_currency', models.DecimalField(decimal_places=2, help_text='Amount in Local Currency', max_digits=20)),
                ('transaction_type', models.CharField(choices=[('DEBIT', 'Debit'), ('CREDIT', 'Credit')], default='DEBIT', help_text='Transaction type (Debit or Credit)', max_length=10)),
                ('local_currency', models.CharField(default='SAR', help_text='Local Currency Code', max_length=10)),
                ('text', models.TextField(blank=True, help_text='Transaction Text', null=True)),
                ('document_date', models.DateField(blank=True, help_text='Original Document Date', null=True)),
                ('offsetting_account', models.CharField(blank=True, help_text='Offsetting Account', max_length=20, null=True)),
                ('user_name', models.CharField(db_index=True, help_text='User Name', max_length=50)),
                ('entry_date', models.DateField(blank=True, help_text='Entry Date', null=True)),
                ('document_type', models.CharField(blank=True, db_index=True, help_text='Document Type (DZ, SA, TR, AB, etc.)', max_length=10, null=True)),
                ('profit_center', models.CharField(blank=True, db_index=True, help_text='Profit Center Code', max_length=20, null=True)),
                ('cost_center', models.CharField(blank=True, help_text='Cost Center Code', max_length=20, null=True)),
                ('clearing_document', models.CharField(blank=True, help_text='Clearing Document Number', max_length=20, null=True)),
                ('segment', models.CharField(blank=True, help_text='Segment Code', max_length=20, null=True)),
                ('wbs_element', models.CharField(blank=True, help_text='WBS Element', max_length=20, null=True)),
                ('plant', models.CharField(blank=True, help_text='Plant Code', max_length=20, null=True)),
                ('material', models.CharField(blank=True, help_text='Material Number', max_length=20, null=True)),
                ('invoice_reference', models.CharField(blank=True, help_text='Invoice Reference', max_length=20, null=True)),
                ('billing_document', models.CharField(blank=True, help_text='Billing Document', max_length=20, null=True)),
                ('sales_document', models.CharField(blank=True, help_text='Sales Document', max_length=20, null=True)),
                ('purchasing_document', models.CharField(blank=True, help_text='Purchasing Document', max_length=20, null=True)),
                ('order_number', models.CharField(blank=True, help_text='Order Number', max_length=20, null=True)),
                ('asset_number', models.CharField(blank=True, help_text='Asset Number', max_length=20, null=True)),
                ('network', models.CharField(blank=True, help_text='Network Number', max_length=20, null=True)),
                ('assignment', models.CharField(blank=True, help_text='Assignment Field', max_length=20, null=True)),
                ('tax_code', models.CharField(blank=True, help_text='Tax Code', max_length=10, null=True)),
                ('account_assignment', models.CharField(blank=True, help_text='Account Assignment', max_length=20, null=True)),
                ('fiscal_year', models.IntegerField(help_text='Fiscal Year')),
                ('posting_period', models.IntegerField(help_text='Posting Period (1-16)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(16)])),
                ('year_month', models.CharField(blank=True, help_text='Year/Month (YYYY/MM)', max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gl_account_ref', models.ForeignKey(blank=True, help_text='Reference to GL Account details', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='postings', to='core.glaccount')),
            ],
            options={
                'db_table': 'sap_gl_postings',
                'ordering': ['-posting_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric_date', models.DateField(db_index=True, help_text='Date of the metric')),
                ('total_transactions', models.IntegerField(default=0)),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20)),
                ('new_transactions', models.IntegerField(default=0)),
                ('new_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20)),
                ('active_users', models.IntegerField(default=0)),
                ('unique_documents', models.IntegerField(default=0)),
                ('unique_accounts', models.IntegerField(default=0)),
                ('analyses_run', models.IntegerField(default=0)),
                ('flagged_transactions', models.IntegerField(default=0)),
                ('high_risk_transactions', models.IntegerField(default=0)),
                ('avg_processing_time', models.FloatField(default=0.0, help_text='Average processing time in seconds')),
                ('max_processing_time', models.FloatField(default=0.0, help_text='Maximum processing time in seconds')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'system_metrics',
                'ordering': ['-metric_date'],
                'unique_together': {('metric_date',)},
            },
        ),
        migrations.CreateModel(
            name='TransactionAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('risk_score', models.FloatField(default=0.0, help_text='Overall risk score (0-100)')),
                ('risk_level', models.CharField(choices=[('LOW', 'Low Risk'), ('MEDIUM', 'Medium Risk'), ('HIGH', 'High Risk'), ('CRITICAL', 'Critical Risk')], default='LOW', max_length=10)),
                ('amount_anomaly', models.BooleanField(default=False, help_text='Unusual amount flag')),
                ('timing_anomaly', models.BooleanField(default=False, help_text='Unusual timing flag')),
                ('user_anomaly', models.BooleanField(default=False, help_text='Unusual user behavior flag')),
                ('account_anomaly', models.BooleanField(default=False, help_text='Unusual account usage flag')),
                ('pattern_anomaly', models.BooleanField(default=False, help_text='Unusual pattern flag')),
                ('analysis_details', models.JSONField(default=dict, help_text='Detailed analysis results')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='core.analysissession')),
                ('transaction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='core.sapglposting')),
            ],
            options={
                'db_table': 'transaction_analyses',
                'ordering': ['-risk_score', '-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='fileprocessingjob',
            index=models.Index(fields=['file_hash', 'status'], name='file_proces_file_ha_04f37d_idx'),
        ),
        migrations.AddIndex(
            model_name='fileprocessingjob',
            index=models.Index(fields=['run_anomalies', 'status'], name='file_proces_run_ano_c0c498_idx'),
        ),
        migrations.AddIndex(
            model_name='fileprocessingjob',
            index=models.Index(fields=['created_at'], name='file_proces_created_0540bc_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicateanalysisresult',
            index=models.Index(fields=['data_file', 'analysis_date'], name='duplicate_a_data_fi_0a995e_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicateanalysisresult',
            index=models.Index(fields=['status', 'analysis_date'], name='duplicate_a_status_d6fcf4_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicateanalysisresult',
            index=models.Index(fields=['analysis_type'], name='duplicate_a_analysi_61dcaa_idx'),
        ),
        migrations.AddIndex(
            model_name='backdatedanalysisresult',
            index=models.Index(fields=['data_file', 'analysis_date'], name='backdated_a_data_fi_9f8139_idx'),
        ),
        migrations.AddIndex(
            model_name='backdatedanalysisresult',
            index=models.Index(fields=['analysis_type', 'status'], name='backdated_a_analysi_247b64_idx'),
        ),
        migrations.AddIndex(
            model_name='backdatedanalysisresult',
            index=models.Index(fields=['processing_job'], name='backdated_a_process_09c7ad_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsresult',
            index=models.Index(fields=['data_file', 'analysis_date'], name='analytics_r_data_fi_3a6edb_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsresult',
            index=models.Index(fields=['status', 'analysis_date'], name='analytics_r_status_6eda5b_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsresult',
            index=models.Index(fields=['analysis_type'], name='analytics_r_analysi_c308e5_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsprocessingresult',
            index=models.Index(fields=['data_file', 'analytics_type'], name='analytics_p_data_fi_8495dd_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsprocessingresult',
            index=models.Index(fields=['processing_status', 'created_at'], name='analytics_p_process_0eeb16_idx'),
        ),
        migrations.AddIndex(
            model_name='analyticsprocessingresult',
            index=models.Index(fields=['analytics_type', 'processing_status'], name='analytics_p_analyti_f1f996_idx'),
        ),
        migrations.AddIndex(
            model_name='mlmodelprocessingresult',
            index=models.Index(fields=['data_file', 'model_type'], name='ml_model_pr_data_fi_bc7b0f_idx'),
        ),
        migrations.AddIndex(
            model_name='mlmodelprocessingresult',
            index=models.Index(fields=['processing_status', 'created_at'], name='ml_model_pr_process_a3748b_idx'),
        ),
        migrations.AddIndex(
            model_name='mlmodelprocessingresult',
            index=models.Index(fields=['model_type', 'processing_status'], name='ml_model_pr_model_t_43b7a9_idx'),
        ),
        migrations.AddIndex(
            model_name='processingjobtracker',
            index=models.Index(fields=['processing_job'], name='processing__process_8e8bc0_idx'),
        ),
        migrations.AddIndex(
            model_name='processingjobtracker',
            index=models.Index(fields=['data_file', 'created_at'], name='processing__data_fi_2c0e89_idx'),
        ),
        migrations.AddIndex(
            model_name='processingjobtracker',
            index=models.Index(fields=['overall_progress', 'created_at'], name='processing__overall_891fb8_idx'),
        ),
        migrations.AddIndex(
            model_name='sapglposting',
            index=models.Index(fields=['document_number', 'fiscal_year'], name='sap_gl_post_documen_6f2af9_idx'),
        ),
        migrations.AddIndex(
            model_name='sapglposting',
            index=models.Index(fields=['gl_account', 'posting_date'], name='sap_gl_post_gl_acco_9f5a9d_idx'),
        ),
        migrations.AddIndex(
            model_name='sapglposting',
            index=models.Index(fields=['user_name', 'posting_date'], name='sap_gl_post_user_na_a22909_idx'),
        ),
        migrations.AddIndex(
            model_name='sapglposting',
            index=models.Index(fields=['profit_center', 'fiscal_year'], name='sap_gl_post_profit__1212e9_idx'),
        ),
        migrations.AddIndex(
            model_name='sapglposting',
            index=models.Index(fields=['amount_local_currency', 'posting_date'], name='sap_gl_post_amount__2fbc1c_idx'),
        ),
        migrations.AddIndex(
            model_name='sapglposting',
            index=models.Index(fields=['transaction_type', 'gl_account'], name='sap_gl_post_transac_c8474e_idx'),
        ),
    ]
